import { chromium } from "playwright"; import fs from "fs-extra"; console.log("🚀 Startar komplett skrapning av alla länkar..."); const browser = await chromium.launch({ headless: true }); const page = await browser.newPage(); const visitedUrls = new Set(); const scrapedData = []; async function scrapePage(url) { if (visitedUrls.has(url)) return null; visitedUrls.add(url); console.log(`📖 Skrapar sida ${visitedUrls.size}: ${url}`); try { await page.goto(url, { waitUntil: "networkidle", timeout: 30000 }); await page.waitForTimeout(2000); const data = await page.evaluate(() => { const title = document.title || "Ingen titel"; const breadcrumbs = document.querySelector("#c1breadcrumbs")?.textContent?.trim() || ""; const content = document.querySelector("#c1topic")?.innerText || document.body.innerText; return { title, breadcrumbs, content: content.trim(), url: window.location.href, timestamp: new Date().toISOString(), wordCount: content.trim().split(/\s+/).length }; }); console.log(`✅ Skrapade: ${data.title} (${data.wordCount} ord)`); return data; } catch (error) { console.error(`❌ Fel: ${error.message}`); return null; } } const startUrl = "https://nethelpv2.flexhosting.se/SVE/#!Nethelp/623.htm"; const firstPage = await scrapePage(startUrl); if (firstPage) scrapedData.push(firstPage); console.log("🔗 Extraherar alla länkar..."); await page.goto(startUrl, { waitUntil: "networkidle" }); await page.waitForTimeout(3000); const allLinks = await page.evaluate(() => { const links = []; document.querySelectorAll("a[href]").forEach(link => { const href = link.getAttribute("href"); if (href && href.includes("Nethelp/") && href.endsWith(".htm")) { const fullUrl = href.startsWith("http") ? href : "https://nethelpv2.flexhosting.se/SVE/" + href; links.push(fullUrl); } }); return [...new Set(links)]; }); console.log(`📋 Hittade ${allLinks.length} unika länkar att skrapa`); for (let i = 0; i < allLinks.length; i++) { if (i > 0 && i % 10 === 0) { console.log("⏸️ Pausar 2 sekunder..."); await new Promise(r => setTimeout(r, 2000)); } const pageData = await scrapePage(allLinks[i]); if (pageData) scrapedData.push(pageData); if (i % 5 === 0) { const progress = Math.round((i + 1) / allLinks.length * 100); console.log(`📊 Progress: ${i + 1}/${allLinks.length} (${progress}%)`); } } console.log("💾 Sparar all data..."); await fs.ensureDir("./scraped-data-complete"); await fs.writeJson("./scraped-data-complete/complete-dataset.json", { metadata: { totalPages: scrapedData.length, scrapedAt: new Date().toISOString(), totalWords: scrapedData.reduce((sum, page) => sum + page.wordCount, 0) }, pages: scrapedData }, { spaces: 2 }); const allText = scrapedData.map((page, i) => `=== SIDA ${i + 1}: ${page.title} ===
URL: ${page.url}
Breadcrumbs: ${page.breadcrumbs}

${page.content}

${"=".repeat(80)}

`).join(""); await fs.writeFile("./scraped-data-complete/all-content.txt", allText, "utf8"); const index = scrapedData.map((page, i) => ({ id: i + 1, title: page.title, url: page.url, breadcrumbs: page.breadcrumbs, wordCount: page.wordCount })); await fs.writeJson("./scraped-data-complete/index.json", index, { spaces: 2 }); console.log("✅ Skrapning klar!"); console.log(`📈 Statistik:`); console.log(`   - Totalt sidor: ${scrapedData.length}`); console.log(`   - Totalt ord: ${scrapedData.reduce((sum, page) => sum + page.wordCount, 0)}`); console.log(`   - Genomsnittligt ord per sida: ${Math.round(scrapedData.reduce((sum, page) => sum + page.wordCount, 0) / scrapedData.length)}`); await browser.close();
